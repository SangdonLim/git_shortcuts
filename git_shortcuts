alias grr='
rebase_author_date=$(   git show --pretty="%ad" --quiet)
rebase_author_name=$(   git show --pretty="%an" --quiet)
rebase_author_email=$(  git show --pretty="%ae" --quiet)
rebase_commit_message=$(git show --pretty="%s" --quiet)
rebase_committer_name=$(git show --pretty="%cn" --quiet)
echo $rebase_author_date
echo $rebase_author_name
echo $rebase_author_email
echo $rebase_commit_message
echo $rebase_committer_name'

alias agrr='git commit --amend -m"$rebase_commit_message" --date="$rebase_author_date" --author="$rebase_author_name<$rebase_author_email>"'
alias cgrr='git commit -m"$rebase_commit_message" --date="$rebase_author_date" --author="$rebase_author_name<$rebase_author_email>"'

alias grrc='git rebase --continue'
alias grra='git rebase --abort'

flushdate() {

  current_branch=$(git symbolic-ref --short HEAD)

  if [[ $# -eq 0 ]] ; then

    echo "flushing dates on all commits in $current_branch"

    git filter-repo --force --commit-callback '
      commit.committer_date = commit.author_date
    ' --refs HEAD

  else

    echo "flushing dates on commits $1..$current_branch"

    rev_parse_output=$(git rev-parse $1 2>&1)

    if [[ $rev_parse_output =~ "ambiguous" ]] ; then
      # need to bail out here because continuing would rewrite the entire history
      echo "$rev_parse_output"
      echo "bailing out.."
      return 0;
    fi

    git filter-repo --force --commit-callback '
      commit.committer_date = commit.author_date
    ' --refs $1..$current_branch
  fi

}

meow() {

  # meow: change commit message of a target commit while keeping committer/author information
  # usage:
  # meow 12345678 'new commit message'
  # meow 12345678 'new commit message\n\nsneaky sneaky'

  current_branch=$(git symbolic-ref --short HEAD)

  if [[ $# -eq 0 ]] ; then

    echo "first argument is empty; it must be a commit hash"

  else

    echo "changing commit message on commit $1"

    rev_parse_output=$(git rev-parse $1 2>&1)

    if [[ $rev_parse_output =~ "ambiguous" ]] ; then
      # need to bail out here because continuing would rewrite the entire history
      echo "$rev_parse_output"
      echo "bailing out.."
      return 0;
    fi

    git filter-repo --force --commit-callback "
      if commit.original_id == b'"$rev_parse_output"':
        commit.message = b'"$2"\n'
    " --refs $1~1..$current_branch
  fi

}

flushtags() {

  current_branch=$(git symbolic-ref --short HEAD)

  if [[ $# -eq 0 ]] ; then

    git tag -l | while read -r tag
    do
      echo $tag
      COMMIT_HASH_OF_THISTAG=$(git rev-list -1 $tag)
      GIT_COMMITTER_DATE=$(git show $COMMIT_HASH_OF_THISTAG --format='%aD' --quiet) git tag -f $tag $COMMIT_HASH_OF_THISTAG
      echo "changed tag date to commit author date: $GIT_COMMITTER_DATE"
    done

    echo "current state is:"
    git for-each-ref --format="%(refname:short) | %(creatordate)" "refs/tags/*"

  fi

}
